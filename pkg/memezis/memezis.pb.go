// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: memezis.proto

package memezis

import (
	context "context"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MediaType int32

const (
	MediaType_PNG MediaType = 0
	MediaType_JPG MediaType = 1
	MediaType_GIF MediaType = 2
)

var MediaType_name = map[int32]string{
	0: "PNG",
	1: "JPG",
	2: "GIF",
}

var MediaType_value = map[string]int32{
	"PNG": 0,
	"JPG": 1,
	"GIF": 2,
}

func (x MediaType) String() string {
	return proto.EnumName(MediaType_name, int32(x))
}

func (MediaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_961ae4f30e6cd6ea, []int{0}
}

type AddPostRequest struct {
	Media                []*Media         `protobuf:"bytes,1,rep,name=media,proto3" json:"media,omitempty"`
	AddedBy              string           `protobuf:"bytes,2,opt,name=addedBy,proto3" json:"addedBy,omitempty"`
	Text                 string           `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Tags                 []string         `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	CreatedAt            *types.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	SourceUrl            string           `protobuf:"bytes,6,opt,name=sourceUrl,proto3" json:"sourceUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AddPostRequest) Reset()         { *m = AddPostRequest{} }
func (m *AddPostRequest) String() string { return proto.CompactTextString(m) }
func (*AddPostRequest) ProtoMessage()    {}
func (*AddPostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_961ae4f30e6cd6ea, []int{0}
}
func (m *AddPostRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPostRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPostRequest.Merge(m, src)
}
func (m *AddPostRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddPostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPostRequest proto.InternalMessageInfo

func (m *AddPostRequest) GetMedia() []*Media {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *AddPostRequest) GetAddedBy() string {
	if m != nil {
		return m.AddedBy
	}
	return ""
}

func (m *AddPostRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *AddPostRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *AddPostRequest) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *AddPostRequest) GetSourceUrl() string {
	if m != nil {
		return m.SourceUrl
	}
	return ""
}

type Media struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	URL                  string   `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	SourceID             string   `protobuf:"bytes,4,opt,name=sourceID,proto3" json:"sourceID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Media) Reset()         { *m = Media{} }
func (m *Media) String() string { return proto.CompactTextString(m) }
func (*Media) ProtoMessage()    {}
func (*Media) Descriptor() ([]byte, []int) {
	return fileDescriptor_961ae4f30e6cd6ea, []int{1}
}
func (m *Media) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Media) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Media.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Media) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Media.Merge(m, src)
}
func (m *Media) XXX_Size() int {
	return m.Size()
}
func (m *Media) XXX_DiscardUnknown() {
	xxx_messageInfo_Media.DiscardUnknown(m)
}

var xxx_messageInfo_Media proto.InternalMessageInfo

func (m *Media) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Media) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Media) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Media) GetSourceID() string {
	if m != nil {
		return m.SourceID
	}
	return ""
}

type Vote struct {
	Up                   int64    `protobuf:"varint,1,opt,name=up,proto3" json:"up,omitempty"`
	Down                 int64    `protobuf:"varint,2,opt,name=down,proto3" json:"down,omitempty"`
	Status               string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_961ae4f30e6cd6ea, []int{2}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetUp() int64 {
	if m != nil {
		return m.Up
	}
	return 0
}

func (m *Vote) GetDown() int64 {
	if m != nil {
		return m.Down
	}
	return 0
}

func (m *Vote) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type Duplicates struct {
	Complete             []int64  `protobuf:"varint,1,rep,packed,name=complete,proto3" json:"complete,omitempty"`
	Likely               []int64  `protobuf:"varint,2,rep,packed,name=likely,proto3" json:"likely,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Duplicates) Reset()         { *m = Duplicates{} }
func (m *Duplicates) String() string { return proto.CompactTextString(m) }
func (*Duplicates) ProtoMessage()    {}
func (*Duplicates) Descriptor() ([]byte, []int) {
	return fileDescriptor_961ae4f30e6cd6ea, []int{3}
}
func (m *Duplicates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Duplicates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Duplicates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Duplicates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Duplicates.Merge(m, src)
}
func (m *Duplicates) XXX_Size() int {
	return m.Size()
}
func (m *Duplicates) XXX_DiscardUnknown() {
	xxx_messageInfo_Duplicates.DiscardUnknown(m)
}

var xxx_messageInfo_Duplicates proto.InternalMessageInfo

func (m *Duplicates) GetComplete() []int64 {
	if m != nil {
		return m.Complete
	}
	return nil
}

func (m *Duplicates) GetLikely() []int64 {
	if m != nil {
		return m.Likely
	}
	return nil
}

type AddPostResponse struct {
	ID                   int64       `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Duplicates           *Duplicates `protobuf:"bytes,2,opt,name=duplicates,proto3" json:"duplicates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AddPostResponse) Reset()         { *m = AddPostResponse{} }
func (m *AddPostResponse) String() string { return proto.CompactTextString(m) }
func (*AddPostResponse) ProtoMessage()    {}
func (*AddPostResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_961ae4f30e6cd6ea, []int{4}
}
func (m *AddPostResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPostResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPostResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPostResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPostResponse.Merge(m, src)
}
func (m *AddPostResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddPostResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPostResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddPostResponse proto.InternalMessageInfo

func (m *AddPostResponse) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AddPostResponse) GetDuplicates() *Duplicates {
	if m != nil {
		return m.Duplicates
	}
	return nil
}

type GetPostByIDRequest struct {
	PostID               int64    `protobuf:"varint,1,opt,name=postID,proto3" json:"postID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPostByIDRequest) Reset()         { *m = GetPostByIDRequest{} }
func (m *GetPostByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetPostByIDRequest) ProtoMessage()    {}
func (*GetPostByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_961ae4f30e6cd6ea, []int{5}
}
func (m *GetPostByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPostByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPostByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPostByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPostByIDRequest.Merge(m, src)
}
func (m *GetPostByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPostByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPostByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPostByIDRequest proto.InternalMessageInfo

func (m *GetPostByIDRequest) GetPostID() int64 {
	if m != nil {
		return m.PostID
	}
	return 0
}

type Post struct {
	ID                   int64      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Media                []*Media   `protobuf:"bytes,2,rep,name=media,proto3" json:"media,omitempty"`
	AddedBy              string     `protobuf:"bytes,3,opt,name=addedBy,proto3" json:"addedBy,omitempty"`
	Source               string     `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	Votes                *Vote      `protobuf:"bytes,5,opt,name=votes,proto3" json:"votes,omitempty"`
	Tags                 []string   `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	Text                 string     `protobuf:"bytes,7,opt,name=text,proto3" json:"text,omitempty"`
	SourceURL            string     `protobuf:"bytes,8,opt,name=sourceURL,proto3" json:"sourceURL,omitempty"`
	Publish              []*Publish `protobuf:"bytes,9,rep,name=publish,proto3" json:"publish,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Post) Reset()         { *m = Post{} }
func (m *Post) String() string { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()    {}
func (*Post) Descriptor() ([]byte, []int) {
	return fileDescriptor_961ae4f30e6cd6ea, []int{6}
}
func (m *Post) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Post) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Post.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Post) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Post.Merge(m, src)
}
func (m *Post) XXX_Size() int {
	return m.Size()
}
func (m *Post) XXX_DiscardUnknown() {
	xxx_messageInfo_Post.DiscardUnknown(m)
}

var xxx_messageInfo_Post proto.InternalMessageInfo

func (m *Post) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Post) GetMedia() []*Media {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *Post) GetAddedBy() string {
	if m != nil {
		return m.AddedBy
	}
	return ""
}

func (m *Post) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Post) GetVotes() *Vote {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *Post) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Post) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Post) GetSourceURL() string {
	if m != nil {
		return m.SourceURL
	}
	return ""
}

func (m *Post) GetPublish() []*Publish {
	if m != nil {
		return m.Publish
	}
	return nil
}

type Publish struct {
	PublishedAt          *types.Timestamp `protobuf:"bytes,1,opt,name=publishedAt,proto3" json:"publishedAt,omitempty"`
	PublishedTo          string           `protobuf:"bytes,2,opt,name=publishedTo,proto3" json:"publishedTo,omitempty"`
	URL                  string           `protobuf:"bytes,3,opt,name=URL,proto3" json:"URL,omitempty"`
	Status               string           `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Publish) Reset()         { *m = Publish{} }
func (m *Publish) String() string { return proto.CompactTextString(m) }
func (*Publish) ProtoMessage()    {}
func (*Publish) Descriptor() ([]byte, []int) {
	return fileDescriptor_961ae4f30e6cd6ea, []int{7}
}
func (m *Publish) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Publish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Publish.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Publish) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Publish.Merge(m, src)
}
func (m *Publish) XXX_Size() int {
	return m.Size()
}
func (m *Publish) XXX_DiscardUnknown() {
	xxx_messageInfo_Publish.DiscardUnknown(m)
}

var xxx_messageInfo_Publish proto.InternalMessageInfo

func (m *Publish) GetPublishedAt() *types.Timestamp {
	if m != nil {
		return m.PublishedAt
	}
	return nil
}

func (m *Publish) GetPublishedTo() string {
	if m != nil {
		return m.PublishedTo
	}
	return ""
}

func (m *Publish) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Publish) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type PublishPostRequest struct {
	PostID               int64            `protobuf:"varint,1,opt,name=postID,proto3" json:"postID,omitempty"`
	URL                  string           `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
	PublishedTo          string           `protobuf:"bytes,3,opt,name=publishedTo,proto3" json:"publishedTo,omitempty"`
	PublishedAt          *types.Timestamp `protobuf:"bytes,4,opt,name=publishedAt,proto3" json:"publishedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PublishPostRequest) Reset()         { *m = PublishPostRequest{} }
func (m *PublishPostRequest) String() string { return proto.CompactTextString(m) }
func (*PublishPostRequest) ProtoMessage()    {}
func (*PublishPostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_961ae4f30e6cd6ea, []int{8}
}
func (m *PublishPostRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishPostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishPostRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishPostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishPostRequest.Merge(m, src)
}
func (m *PublishPostRequest) XXX_Size() int {
	return m.Size()
}
func (m *PublishPostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishPostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishPostRequest proto.InternalMessageInfo

func (m *PublishPostRequest) GetPostID() int64 {
	if m != nil {
		return m.PostID
	}
	return 0
}

func (m *PublishPostRequest) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *PublishPostRequest) GetPublishedTo() string {
	if m != nil {
		return m.PublishedTo
	}
	return ""
}

func (m *PublishPostRequest) GetPublishedAt() *types.Timestamp {
	if m != nil {
		return m.PublishedAt
	}
	return nil
}

type VoteRequest struct {
	UserID               string   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	PostID               int64    `protobuf:"varint,2,opt,name=postID,proto3" json:"postID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteRequest) Reset()         { *m = VoteRequest{} }
func (m *VoteRequest) String() string { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()    {}
func (*VoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_961ae4f30e6cd6ea, []int{9}
}
func (m *VoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteRequest.Merge(m, src)
}
func (m *VoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *VoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VoteRequest proto.InternalMessageInfo

func (m *VoteRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *VoteRequest) GetPostID() int64 {
	if m != nil {
		return m.PostID
	}
	return 0
}

type GetQueueInfoRequest struct {
	Queue                string   `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetQueueInfoRequest) Reset()         { *m = GetQueueInfoRequest{} }
func (m *GetQueueInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetQueueInfoRequest) ProtoMessage()    {}
func (*GetQueueInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_961ae4f30e6cd6ea, []int{10}
}
func (m *GetQueueInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetQueueInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetQueueInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetQueueInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetQueueInfoRequest.Merge(m, src)
}
func (m *GetQueueInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetQueueInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetQueueInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetQueueInfoRequest proto.InternalMessageInfo

func (m *GetQueueInfoRequest) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

type GetQueueInfoResponse struct {
	Length               int64            `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	LastPostTime         *types.Timestamp `protobuf:"bytes,2,opt,name=lastPostTime,proto3" json:"lastPostTime,omitempty"`
	DueTime              *types.Timestamp `protobuf:"bytes,3,opt,name=dueTime,proto3" json:"dueTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetQueueInfoResponse) Reset()         { *m = GetQueueInfoResponse{} }
func (m *GetQueueInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetQueueInfoResponse) ProtoMessage()    {}
func (*GetQueueInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_961ae4f30e6cd6ea, []int{11}
}
func (m *GetQueueInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetQueueInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetQueueInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetQueueInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetQueueInfoResponse.Merge(m, src)
}
func (m *GetQueueInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetQueueInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetQueueInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetQueueInfoResponse proto.InternalMessageInfo

func (m *GetQueueInfoResponse) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *GetQueueInfoResponse) GetLastPostTime() *types.Timestamp {
	if m != nil {
		return m.LastPostTime
	}
	return nil
}

func (m *GetQueueInfoResponse) GetDueTime() *types.Timestamp {
	if m != nil {
		return m.DueTime
	}
	return nil
}

type MediaMetadata struct {
	Filename             string    `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Type                 MediaType `protobuf:"varint,2,opt,name=type,proto3,enum=MediaType" json:"type,omitempty"`
	Filesize             int64     `protobuf:"varint,3,opt,name=filesize,proto3" json:"filesize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MediaMetadata) Reset()         { *m = MediaMetadata{} }
func (m *MediaMetadata) String() string { return proto.CompactTextString(m) }
func (*MediaMetadata) ProtoMessage()    {}
func (*MediaMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_961ae4f30e6cd6ea, []int{12}
}
func (m *MediaMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaMetadata.Merge(m, src)
}
func (m *MediaMetadata) XXX_Size() int {
	return m.Size()
}
func (m *MediaMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_MediaMetadata proto.InternalMessageInfo

func (m *MediaMetadata) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *MediaMetadata) GetType() MediaType {
	if m != nil {
		return m.Type
	}
	return MediaType_PNG
}

func (m *MediaMetadata) GetFilesize() int64 {
	if m != nil {
		return m.Filesize
	}
	return 0
}

type UploadMediaRequest struct {
	// Types that are valid to be assigned to T:
	//	*UploadMediaRequest_Image
	//	*UploadMediaRequest_Meta
	T                    isUploadMediaRequest_T `protobuf_oneof:"t"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UploadMediaRequest) Reset()         { *m = UploadMediaRequest{} }
func (m *UploadMediaRequest) String() string { return proto.CompactTextString(m) }
func (*UploadMediaRequest) ProtoMessage()    {}
func (*UploadMediaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_961ae4f30e6cd6ea, []int{13}
}
func (m *UploadMediaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadMediaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadMediaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadMediaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadMediaRequest.Merge(m, src)
}
func (m *UploadMediaRequest) XXX_Size() int {
	return m.Size()
}
func (m *UploadMediaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadMediaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadMediaRequest proto.InternalMessageInfo

type isUploadMediaRequest_T interface {
	isUploadMediaRequest_T()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UploadMediaRequest_Image struct {
	Image []byte `protobuf:"bytes,1,opt,name=image,proto3,oneof" json:"image,omitempty"`
}
type UploadMediaRequest_Meta struct {
	Meta *MediaMetadata `protobuf:"bytes,2,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
}

func (*UploadMediaRequest_Image) isUploadMediaRequest_T() {}
func (*UploadMediaRequest_Meta) isUploadMediaRequest_T()  {}

func (m *UploadMediaRequest) GetT() isUploadMediaRequest_T {
	if m != nil {
		return m.T
	}
	return nil
}

func (m *UploadMediaRequest) GetImage() []byte {
	if x, ok := m.GetT().(*UploadMediaRequest_Image); ok {
		return x.Image
	}
	return nil
}

func (m *UploadMediaRequest) GetMeta() *MediaMetadata {
	if x, ok := m.GetT().(*UploadMediaRequest_Meta); ok {
		return x.Meta
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UploadMediaRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UploadMediaRequest_Image)(nil),
		(*UploadMediaRequest_Meta)(nil),
	}
}

type UploadMediaResponse struct {
	URL                  string   `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadMediaResponse) Reset()         { *m = UploadMediaResponse{} }
func (m *UploadMediaResponse) String() string { return proto.CompactTextString(m) }
func (*UploadMediaResponse) ProtoMessage()    {}
func (*UploadMediaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_961ae4f30e6cd6ea, []int{14}
}
func (m *UploadMediaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadMediaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadMediaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadMediaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadMediaResponse.Merge(m, src)
}
func (m *UploadMediaResponse) XXX_Size() int {
	return m.Size()
}
func (m *UploadMediaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadMediaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadMediaResponse proto.InternalMessageInfo

func (m *UploadMediaResponse) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

type FindDuplicatesRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindDuplicatesRequest) Reset()         { *m = FindDuplicatesRequest{} }
func (m *FindDuplicatesRequest) String() string { return proto.CompactTextString(m) }
func (*FindDuplicatesRequest) ProtoMessage()    {}
func (*FindDuplicatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_961ae4f30e6cd6ea, []int{15}
}
func (m *FindDuplicatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindDuplicatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindDuplicatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindDuplicatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindDuplicatesRequest.Merge(m, src)
}
func (m *FindDuplicatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *FindDuplicatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindDuplicatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindDuplicatesRequest proto.InternalMessageInfo

func (m *FindDuplicatesRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type FindDuplicatesResponse struct {
	Complete             []*Post  `protobuf:"bytes,1,rep,name=complete,proto3" json:"complete,omitempty"`
	Likely               []*Post  `protobuf:"bytes,2,rep,name=likely,proto3" json:"likely,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindDuplicatesResponse) Reset()         { *m = FindDuplicatesResponse{} }
func (m *FindDuplicatesResponse) String() string { return proto.CompactTextString(m) }
func (*FindDuplicatesResponse) ProtoMessage()    {}
func (*FindDuplicatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_961ae4f30e6cd6ea, []int{16}
}
func (m *FindDuplicatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindDuplicatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindDuplicatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindDuplicatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindDuplicatesResponse.Merge(m, src)
}
func (m *FindDuplicatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *FindDuplicatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindDuplicatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindDuplicatesResponse proto.InternalMessageInfo

func (m *FindDuplicatesResponse) GetComplete() []*Post {
	if m != nil {
		return m.Complete
	}
	return nil
}

func (m *FindDuplicatesResponse) GetLikely() []*Post {
	if m != nil {
		return m.Likely
	}
	return nil
}

func init() {
	proto.RegisterEnum("MediaType", MediaType_name, MediaType_value)
	proto.RegisterType((*AddPostRequest)(nil), "AddPostRequest")
	proto.RegisterType((*Media)(nil), "Media")
	proto.RegisterType((*Vote)(nil), "Vote")
	proto.RegisterType((*Duplicates)(nil), "Duplicates")
	proto.RegisterType((*AddPostResponse)(nil), "AddPostResponse")
	proto.RegisterType((*GetPostByIDRequest)(nil), "GetPostByIDRequest")
	proto.RegisterType((*Post)(nil), "Post")
	proto.RegisterType((*Publish)(nil), "Publish")
	proto.RegisterType((*PublishPostRequest)(nil), "PublishPostRequest")
	proto.RegisterType((*VoteRequest)(nil), "VoteRequest")
	proto.RegisterType((*GetQueueInfoRequest)(nil), "GetQueueInfoRequest")
	proto.RegisterType((*GetQueueInfoResponse)(nil), "GetQueueInfoResponse")
	proto.RegisterType((*MediaMetadata)(nil), "MediaMetadata")
	proto.RegisterType((*UploadMediaRequest)(nil), "UploadMediaRequest")
	proto.RegisterType((*UploadMediaResponse)(nil), "UploadMediaResponse")
	proto.RegisterType((*FindDuplicatesRequest)(nil), "FindDuplicatesRequest")
	proto.RegisterType((*FindDuplicatesResponse)(nil), "FindDuplicatesResponse")
}

func init() { proto.RegisterFile("memezis.proto", fileDescriptor_961ae4f30e6cd6ea) }

var fileDescriptor_961ae4f30e6cd6ea = []byte{
	// 1304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcd, 0x72, 0x1b, 0x45,
	0x10, 0xf6, 0x6a, 0xf5, 0x63, 0xb7, 0x6c, 0x45, 0x35, 0xb2, 0x15, 0x95, 0x62, 0xcc, 0x32, 0x95,
	0x4a, 0x4c, 0x12, 0xef, 0x06, 0x93, 0x03, 0x95, 0x82, 0x80, 0x5c, 0x26, 0x8e, 0x28, 0x27, 0x98,
	0x4d, 0xcc, 0x5f, 0x71, 0x19, 0x6b, 0xc7, 0xeb, 0xad, 0xec, 0x5f, 0x34, 0xb3, 0x31, 0x4a, 0x2a,
	0x97, 0x9c, 0x38, 0x2b, 0x17, 0x4e, 0x9c, 0x78, 0x98, 0x1c, 0xa9, 0xe2, 0x05, 0xa8, 0xc0, 0x95,
	0x0b, 0x4f, 0x40, 0xcd, 0xec, 0xec, 0x6a, 0x25, 0x39, 0xb8, 0x38, 0x69, 0xba, 0xa7, 0xf7, 0xeb,
	0x6f, 0x7a, 0xbe, 0xee, 0x11, 0xac, 0x04, 0x34, 0xa0, 0xcf, 0x3c, 0x66, 0xc6, 0xc3, 0x88, 0x47,
	0xdd, 0x75, 0x37, 0x8a, 0x5c, 0x9f, 0x5a, 0x24, 0xf6, 0x2c, 0x12, 0x86, 0x11, 0x27, 0xdc, 0x8b,
	0xc2, 0x6c, 0xf7, 0x92, 0xda, 0x95, 0xd6, 0x51, 0x72, 0x6c, 0xd1, 0x20, 0xe6, 0x23, 0xb5, 0xf9,
	0xee, 0xec, 0x26, 0xf7, 0x02, 0xca, 0x38, 0x09, 0x62, 0x15, 0xf0, 0xd0, 0xf5, 0xf8, 0x49, 0x72,
	0x64, 0x0e, 0xa2, 0xc0, 0x72, 0x87, 0xf1, 0x60, 0x8b, 0x0e, 0x22, 0x36, 0x62, 0x9c, 0x2a, 0xd3,
	0x25, 0x9c, 0x9e, 0x92, 0x51, 0x0a, 0x30, 0xd8, 0x72, 0x69, 0xb8, 0xc5, 0x4e, 0x89, 0xeb, 0xd2,
	0xa1, 0x15, 0xc5, 0x92, 0xc6, 0x3c, 0x25, 0xfc, 0x5a, 0x83, 0x46, 0xcf, 0x71, 0x0e, 0x22, 0xc6,
	0x6d, 0xfa, 0x24, 0xa1, 0x8c, 0xa3, 0x75, 0xa8, 0x04, 0xd4, 0xf1, 0x48, 0x47, 0x33, 0xf4, 0xcd,
	0xfa, 0x76, 0xd5, 0xbc, 0x2f, 0x2c, 0x3b, 0x75, 0xa2, 0x0e, 0xd4, 0x88, 0xe3, 0x50, 0x67, 0x67,
	0xd4, 0x29, 0x19, 0xda, 0xe6, 0x92, 0x9d, 0x99, 0x08, 0x41, 0x99, 0xd3, 0x1f, 0x79, 0x47, 0x97,
	0x6e, 0xb9, 0x96, 0x3e, 0xe2, 0xb2, 0x4e, 0xd9, 0xd0, 0xa5, 0x8f, 0xb8, 0x0c, 0x7d, 0x04, 0x4b,
	0x83, 0x21, 0x25, 0x9c, 0x3a, 0x3d, 0xde, 0xa9, 0x18, 0xda, 0x66, 0x7d, 0xbb, 0x6b, 0xa6, 0x87,
	0x37, 0xb3, 0xc3, 0x9b, 0x8f, 0xb2, 0xc3, 0xdb, 0x93, 0x60, 0xb4, 0x0e, 0x4b, 0x2c, 0x4a, 0x86,
	0x03, 0x7a, 0x38, 0xf4, 0x3b, 0x55, 0x99, 0x66, 0xe2, 0xc0, 0xdf, 0x41, 0x45, 0x32, 0x45, 0x0d,
	0x28, 0x79, 0x4e, 0x47, 0x93, 0xfb, 0x25, 0xcf, 0x41, 0x4d, 0xd0, 0x0f, 0xed, 0x7d, 0x45, 0x57,
	0x2c, 0x25, 0xad, 0x51, 0x4c, 0x73, 0xaa, 0xa3, 0x98, 0xa2, 0x2e, 0x2c, 0xa6, 0x58, 0xfd, 0xdd,
	0x4e, 0x59, 0xfa, 0x73, 0x1b, 0xef, 0x40, 0xf9, 0xeb, 0x88, 0x53, 0x81, 0x9c, 0xc4, 0x12, 0x59,
	0xb7, 0x4b, 0x49, 0x2c, 0x70, 0x9c, 0xe8, 0x34, 0x94, 0xd0, 0xba, 0x2d, 0xd7, 0xa8, 0x0d, 0x55,
	0xc6, 0x09, 0x4f, 0x98, 0x42, 0x57, 0x16, 0xfe, 0x0c, 0x60, 0x37, 0x89, 0x7d, 0x6f, 0x40, 0x38,
	0x65, 0x22, 0xdb, 0x20, 0x0a, 0x62, 0x9f, 0x72, 0x2a, 0xeb, 0xac, 0xdb, 0xb9, 0x2d, 0x10, 0x7c,
	0xef, 0x31, 0xf5, 0x45, 0x85, 0xc5, 0x8e, 0xb2, 0xf0, 0x03, 0xb8, 0x90, 0x5f, 0x15, 0x8b, 0xa3,
	0x90, 0x49, 0x42, 0xfd, 0xdd, 0x8c, 0x50, 0x7f, 0x17, 0x5d, 0x07, 0x70, 0xf2, 0x24, 0x92, 0x56,
	0x7d, 0xbb, 0x6e, 0x4e, 0xf2, 0xda, 0x85, 0x6d, 0x7c, 0x03, 0xd0, 0x1e, 0xe5, 0x02, 0x6f, 0x67,
	0xd4, 0xdf, 0xcd, 0xae, 0xbf, 0x0d, 0xd5, 0x38, 0x62, 0x3c, 0x87, 0x55, 0x16, 0xfe, 0x5b, 0x83,
	0xb2, 0x88, 0x9d, 0xcb, 0x99, 0xeb, 0xa5, 0x74, 0x8e, 0x5e, 0xf4, 0x69, 0xbd, 0x88, 0x42, 0xc9,
	0x02, 0xab, 0x72, 0x2b, 0x0b, 0x5d, 0x82, 0xca, 0xd3, 0x48, 0xd0, 0x4f, 0xb5, 0x51, 0x31, 0x45,
	0xe9, 0xed, 0xd4, 0x97, 0x0b, 0xaa, 0x5a, 0x10, 0x54, 0x26, 0xbc, 0x5a, 0x41, 0x78, 0x13, 0xa9,
	0xd8, 0xfb, 0x9d, 0xc5, 0x29, 0xa9, 0xd8, 0xfb, 0x08, 0x43, 0x2d, 0x4e, 0x8e, 0x7c, 0x8f, 0x9d,
	0x74, 0x96, 0x24, 0xe9, 0x45, 0xf3, 0x20, 0xb5, 0xed, 0x6c, 0x03, 0xbf, 0xd2, 0xa0, 0xa6, 0x9c,
	0xe8, 0x63, 0xa8, 0x2b, 0xb7, 0x14, 0xad, 0x76, 0xae, 0x68, 0x8b, 0xe1, 0xc8, 0x28, 0x7c, 0xfd,
	0x28, 0x52, 0x3a, 0x2c, 0xba, 0x32, 0x85, 0xea, 0x13, 0x85, 0xb6, 0xa1, 0xfa, 0x30, 0x55, 0x91,
	0x2a, 0x4e, 0x6a, 0xe1, 0x5f, 0x34, 0x40, 0x8a, 0x55, 0xb1, 0x67, 0xdf, 0x72, 0x69, 0x67, 0x48,
	0x7f, 0x86, 0x8c, 0x3e, 0x4f, 0x66, 0xe6, 0xb0, 0xe5, 0xff, 0x75, 0x58, 0xfc, 0x09, 0xd4, 0xe5,
	0x7d, 0x4d, 0x88, 0x25, 0x8c, 0x0e, 0x15, 0xb1, 0x25, 0x5b, 0x59, 0x05, 0xc2, 0xa5, 0x29, 0x95,
	0x5d, 0x87, 0xd6, 0x1e, 0xe5, 0x5f, 0x25, 0x34, 0xa1, 0xfd, 0xf0, 0x38, 0xca, 0x60, 0x56, 0xa1,
	0xf2, 0x44, 0xf8, 0x14, 0x4a, 0x6a, 0xe0, 0x5f, 0x35, 0x58, 0x9d, 0x8e, 0x56, 0x6d, 0x21, 0x3a,
	0x88, 0x86, 0x2e, 0x3f, 0xc9, 0xca, 0x91, 0x5a, 0xe8, 0x0e, 0x2c, 0xfb, 0x84, 0x49, 0xc9, 0x0b,
	0xfa, 0xaa, 0x41, 0xfe, 0xeb, 0x6c, 0x53, 0xf1, 0xe8, 0x16, 0xd4, 0x9c, 0x84, 0xca, 0x4f, 0xf5,
	0x73, 0x3f, 0xcd, 0x42, 0xb1, 0x0b, 0x2b, 0xb2, 0x25, 0xee, 0x53, 0x4e, 0x1c, 0xc2, 0x89, 0x68,
	0xfe, 0x63, 0xcf, 0xa7, 0x21, 0x09, 0xb2, 0x03, 0xe5, 0x36, 0xda, 0x50, 0xa3, 0x49, 0x50, 0x6b,
	0x6c, 0x43, 0xda, 0x4c, 0x8f, 0x46, 0x31, 0x9d, 0x8c, 0x29, 0x11, 0xcb, 0xbc, 0x67, 0x29, 0x07,
	0xdd, 0xce, 0x6d, 0xfc, 0x0d, 0xa0, 0xc3, 0xd8, 0x8f, 0x88, 0x93, 0x76, 0x60, 0x7e, 0x05, 0x15,
	0x2f, 0x20, 0x6e, 0x9a, 0x6a, 0xf9, 0xde, 0x82, 0x9d, 0x9a, 0xe8, 0x32, 0x94, 0x03, 0xca, 0x89,
	0x2a, 0x42, 0xc3, 0x9c, 0xe2, 0x78, 0x6f, 0xc1, 0x96, 0xbb, 0x3b, 0x3a, 0x68, 0x1c, 0x5f, 0x85,
	0xd6, 0x14, 0xb0, 0x2a, 0xb3, 0x52, 0x97, 0x96, 0xab, 0x0b, 0x5f, 0x85, 0xb5, 0xbb, 0x5e, 0xe8,
	0x14, 0x06, 0x8e, 0x22, 0x31, 0x99, 0xc9, 0xba, 0x98, 0xc9, 0xf8, 0x7b, 0x68, 0xcf, 0x06, 0x2a,
	0xd0, 0xf7, 0x66, 0x26, 0xa3, 0x98, 0x00, 0x52, 0xea, 0x93, 0x01, 0xf9, 0xce, 0xd4, 0x80, 0xcc,
	0x03, 0x94, 0xf3, 0xda, 0x15, 0x58, 0xca, 0xab, 0x86, 0x6a, 0xa0, 0x1f, 0x3c, 0xd8, 0x6b, 0x2e,
	0x88, 0xc5, 0x17, 0x07, 0x7b, 0x4d, 0x4d, 0x2c, 0xf6, 0xfa, 0x77, 0x9b, 0xa5, 0xed, 0x7f, 0xaa,
	0x50, 0xbb, 0x9f, 0x3e, 0xdf, 0xe8, 0x01, 0xd4, 0xd4, 0x6c, 0x45, 0x17, 0xcc, 0xe9, 0x07, 0xb1,
	0xdb, 0x34, 0x67, 0xc6, 0x2e, 0x36, 0xc6, 0xbd, 0x15, 0x54, 0x27, 0x8e, 0xe3, 0x85, 0xae, 0x21,
	0x94, 0xfb, 0xf2, 0xf7, 0xbf, 0x5e, 0x95, 0x00, 0x57, 0x2c, 0x61, 0xdc, 0xd6, 0xae, 0xa1, 0x9f,
	0x34, 0xa8, 0x17, 0xfa, 0x14, 0xb5, 0xcc, 0xf9, 0xae, 0xed, 0xb6, 0xe7, 0xd4, 0xf3, 0xb9, 0xf8,
	0x43, 0x80, 0xf7, 0xc7, 0xbd, 0x4d, 0x74, 0x25, 0x20, 0xc3, 0xc7, 0x12, 0xdc, 0x20, 0xcc, 0xc8,
	0x5b, 0xcc, 0xe0, 0x91, 0xc1, 0xa2, 0x80, 0x1a, 0x83, 0x13, 0x12, 0x86, 0xd4, 0x97, 0x99, 0x2f,
	0xe1, 0xb6, 0xcc, 0x6c, 0x3d, 0x4f, 0xdb, 0xe8, 0x85, 0xa5, 0xe2, 0x05, 0x95, 0x6f, 0xa1, 0x5e,
	0x18, 0xf3, 0xa8, 0x65, 0xce, 0x0f, 0xfd, 0x6e, 0x5a, 0x41, 0xbc, 0x35, 0xee, 0xad, 0x22, 0xe4,
	0x52, 0xce, 0xb3, 0x83, 0x19, 0x47, 0x23, 0xc3, 0x73, 0x64, 0x92, 0x26, 0x6a, 0x4c, 0x27, 0x41,
	0x3f, 0xc0, 0xca, 0x1e, 0xe5, 0x36, 0x09, 0x9d, 0x28, 0x90, 0xa7, 0x7c, 0xcb, 0x81, 0x32, 0xf8,
	0x1b, 0xe3, 0xde, 0x1a, 0x6a, 0x65, 0xf0, 0x43, 0xf9, 0xdd, 0xa4, 0x7c, 0x0d, 0xb4, 0x9c, 0xe2,
	0xa7, 0x1b, 0xe8, 0x4b, 0xa8, 0x1e, 0xc6, 0xf2, 0xd9, 0x5d, 0x36, 0x0b, 0x23, 0xa5, 0x9b, 0x3e,
	0x08, 0xf8, 0xa6, 0xbc, 0x83, 0x24, 0x16, 0xef, 0xc2, 0x04, 0xa4, 0x8b, 0xd7, 0x66, 0x2a, 0x91,
	0x46, 0x88, 0x42, 0x1c, 0xc2, 0xe2, 0x6e, 0x74, 0x1a, 0xbe, 0x1d, 0xf2, 0xd6, 0xb8, 0x77, 0x01,
	0xad, 0x88, 0x57, 0x7c, 0x1a, 0x74, 0x1d, 0x5f, 0x9c, 0x01, 0xcd, 0x62, 0x04, 0xec, 0x63, 0x58,
	0x2e, 0x0e, 0x21, 0xb4, 0x6a, 0x9e, 0x31, 0xc1, 0xba, 0x6b, 0xe6, 0x59, 0x93, 0x0a, 0x9b, 0xe3,
	0x5e, 0x13, 0x35, 0x5c, 0xca, 0x0d, 0x39, 0xd2, 0x0c, 0x2f, 0x3c, 0x8e, 0x64, 0xce, 0x35, 0xd4,
	0xb2, 0xa4, 0xcb, 0x7a, 0x2e, 0x7f, 0x5e, 0x58, 0x62, 0x0b, 0xbd, 0xd4, 0xa0, 0x31, 0xdd, 0x38,
	0xa8, 0x6d, 0x9e, 0xd9, 0x72, 0xdd, 0x8b, 0xe6, 0xd9, 0x1d, 0x86, 0x3f, 0x1d, 0xf7, 0x2e, 0x23,
	0x2c, 0x72, 0x8a, 0xe3, 0x30, 0xe3, 0xd4, 0xe3, 0x27, 0x06, 0xf3, 0x02, 0xcf, 0x27, 0x43, 0x43,
	0xbe, 0xda, 0x85, 0x5b, 0x47, 0xa8, 0x69, 0x4d, 0xfe, 0x33, 0x58, 0xcf, 0x3d, 0xe7, 0x05, 0xba,
	0x0d, 0xf5, 0xc2, 0x38, 0x40, 0x2d, 0x73, 0x7e, 0xea, 0x74, 0x57, 0xcd, 0x33, 0x26, 0xc6, 0xa6,
	0xb6, 0x73, 0x67, 0xdc, 0xbb, 0x8e, 0xde, 0x07, 0xac, 0x1a, 0xcf, 0xe8, 0x1d, 0xf4, 0x6f, 0x1b,
	0x0f, 0xe9, 0xf0, 0xa9, 0x37, 0xa0, 0x42, 0xdb, 0xc3, 0xc4, 0xa7, 0x86, 0xf8, 0x53, 0xcd, 0xb6,
	0xf5, 0x0f, 0xcc, 0x9b, 0xaf, 0xdf, 0x6c, 0x68, 0xbf, 0xbd, 0xd9, 0xd0, 0xfe, 0x78, 0xb3, 0xa1,
	0xfd, 0xfc, 0xe7, 0xc6, 0xc2, 0x51, 0x55, 0x4a, 0xeb, 0xc3, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x00, 0x6f, 0xbf, 0x68, 0x79, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MemezisClient is the client API for Memezis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MemezisClient interface {
	AddPost(ctx context.Context, in *AddPostRequest, opts ...grpc.CallOption) (*AddPostResponse, error)
	PublishPost(ctx context.Context, in *PublishPostRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetPostByID(ctx context.Context, in *GetPostByIDRequest, opts ...grpc.CallOption) (*Post, error)
	GetRandomPost(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Post, error)
	UpVote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*Vote, error)
	DownVote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*Vote, error)
	GetQueueInfo(ctx context.Context, in *GetQueueInfoRequest, opts ...grpc.CallOption) (*GetQueueInfoResponse, error)
	FindDuplicates(ctx context.Context, in *FindDuplicatesRequest, opts ...grpc.CallOption) (*FindDuplicatesResponse, error)
	UploadMedia(ctx context.Context, opts ...grpc.CallOption) (Memezis_UploadMediaClient, error)
}

type memezisClient struct {
	cc *grpc.ClientConn
}

func NewMemezisClient(cc *grpc.ClientConn) MemezisClient {
	return &memezisClient{cc}
}

func (c *memezisClient) AddPost(ctx context.Context, in *AddPostRequest, opts ...grpc.CallOption) (*AddPostResponse, error) {
	out := new(AddPostResponse)
	err := c.cc.Invoke(ctx, "/Memezis/AddPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memezisClient) PublishPost(ctx context.Context, in *PublishPostRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Memezis/PublishPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memezisClient) GetPostByID(ctx context.Context, in *GetPostByIDRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/Memezis/GetPostByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memezisClient) GetRandomPost(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/Memezis/GetRandomPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memezisClient) UpVote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*Vote, error) {
	out := new(Vote)
	err := c.cc.Invoke(ctx, "/Memezis/UpVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memezisClient) DownVote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*Vote, error) {
	out := new(Vote)
	err := c.cc.Invoke(ctx, "/Memezis/DownVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memezisClient) GetQueueInfo(ctx context.Context, in *GetQueueInfoRequest, opts ...grpc.CallOption) (*GetQueueInfoResponse, error) {
	out := new(GetQueueInfoResponse)
	err := c.cc.Invoke(ctx, "/Memezis/GetQueueInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memezisClient) FindDuplicates(ctx context.Context, in *FindDuplicatesRequest, opts ...grpc.CallOption) (*FindDuplicatesResponse, error) {
	out := new(FindDuplicatesResponse)
	err := c.cc.Invoke(ctx, "/Memezis/FindDuplicates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memezisClient) UploadMedia(ctx context.Context, opts ...grpc.CallOption) (Memezis_UploadMediaClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Memezis_serviceDesc.Streams[0], "/Memezis/UploadMedia", opts...)
	if err != nil {
		return nil, err
	}
	x := &memezisUploadMediaClient{stream}
	return x, nil
}

type Memezis_UploadMediaClient interface {
	Send(*UploadMediaRequest) error
	CloseAndRecv() (*UploadMediaResponse, error)
	grpc.ClientStream
}

type memezisUploadMediaClient struct {
	grpc.ClientStream
}

func (x *memezisUploadMediaClient) Send(m *UploadMediaRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *memezisUploadMediaClient) CloseAndRecv() (*UploadMediaResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadMediaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MemezisServer is the server API for Memezis service.
type MemezisServer interface {
	AddPost(context.Context, *AddPostRequest) (*AddPostResponse, error)
	PublishPost(context.Context, *PublishPostRequest) (*empty.Empty, error)
	GetPostByID(context.Context, *GetPostByIDRequest) (*Post, error)
	GetRandomPost(context.Context, *empty.Empty) (*Post, error)
	UpVote(context.Context, *VoteRequest) (*Vote, error)
	DownVote(context.Context, *VoteRequest) (*Vote, error)
	GetQueueInfo(context.Context, *GetQueueInfoRequest) (*GetQueueInfoResponse, error)
	FindDuplicates(context.Context, *FindDuplicatesRequest) (*FindDuplicatesResponse, error)
	UploadMedia(Memezis_UploadMediaServer) error
}

// UnimplementedMemezisServer can be embedded to have forward compatible implementations.
type UnimplementedMemezisServer struct {
}

func (*UnimplementedMemezisServer) AddPost(ctx context.Context, req *AddPostRequest) (*AddPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPost not implemented")
}
func (*UnimplementedMemezisServer) PublishPost(ctx context.Context, req *PublishPostRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishPost not implemented")
}
func (*UnimplementedMemezisServer) GetPostByID(ctx context.Context, req *GetPostByIDRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostByID not implemented")
}
func (*UnimplementedMemezisServer) GetRandomPost(ctx context.Context, req *empty.Empty) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomPost not implemented")
}
func (*UnimplementedMemezisServer) UpVote(ctx context.Context, req *VoteRequest) (*Vote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpVote not implemented")
}
func (*UnimplementedMemezisServer) DownVote(ctx context.Context, req *VoteRequest) (*Vote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownVote not implemented")
}
func (*UnimplementedMemezisServer) GetQueueInfo(ctx context.Context, req *GetQueueInfoRequest) (*GetQueueInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueInfo not implemented")
}
func (*UnimplementedMemezisServer) FindDuplicates(ctx context.Context, req *FindDuplicatesRequest) (*FindDuplicatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDuplicates not implemented")
}
func (*UnimplementedMemezisServer) UploadMedia(srv Memezis_UploadMediaServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadMedia not implemented")
}

func RegisterMemezisServer(s *grpc.Server, srv MemezisServer) {
	s.RegisterService(&_Memezis_serviceDesc, srv)
}

func _Memezis_AddPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemezisServer).AddPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Memezis/AddPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemezisServer).AddPost(ctx, req.(*AddPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Memezis_PublishPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemezisServer).PublishPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Memezis/PublishPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemezisServer).PublishPost(ctx, req.(*PublishPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Memezis_GetPostByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemezisServer).GetPostByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Memezis/GetPostByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemezisServer).GetPostByID(ctx, req.(*GetPostByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Memezis_GetRandomPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemezisServer).GetRandomPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Memezis/GetRandomPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemezisServer).GetRandomPost(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Memezis_UpVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemezisServer).UpVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Memezis/UpVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemezisServer).UpVote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Memezis_DownVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemezisServer).DownVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Memezis/DownVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemezisServer).DownVote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Memezis_GetQueueInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemezisServer).GetQueueInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Memezis/GetQueueInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemezisServer).GetQueueInfo(ctx, req.(*GetQueueInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Memezis_FindDuplicates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDuplicatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemezisServer).FindDuplicates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Memezis/FindDuplicates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemezisServer).FindDuplicates(ctx, req.(*FindDuplicatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Memezis_UploadMedia_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MemezisServer).UploadMedia(&memezisUploadMediaServer{stream})
}

type Memezis_UploadMediaServer interface {
	SendAndClose(*UploadMediaResponse) error
	Recv() (*UploadMediaRequest, error)
	grpc.ServerStream
}

type memezisUploadMediaServer struct {
	grpc.ServerStream
}

func (x *memezisUploadMediaServer) SendAndClose(m *UploadMediaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *memezisUploadMediaServer) Recv() (*UploadMediaRequest, error) {
	m := new(UploadMediaRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Memezis_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Memezis",
	HandlerType: (*MemezisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPost",
			Handler:    _Memezis_AddPost_Handler,
		},
		{
			MethodName: "PublishPost",
			Handler:    _Memezis_PublishPost_Handler,
		},
		{
			MethodName: "GetPostByID",
			Handler:    _Memezis_GetPostByID_Handler,
		},
		{
			MethodName: "GetRandomPost",
			Handler:    _Memezis_GetRandomPost_Handler,
		},
		{
			MethodName: "UpVote",
			Handler:    _Memezis_UpVote_Handler,
		},
		{
			MethodName: "DownVote",
			Handler:    _Memezis_DownVote_Handler,
		},
		{
			MethodName: "GetQueueInfo",
			Handler:    _Memezis_GetQueueInfo_Handler,
		},
		{
			MethodName: "FindDuplicates",
			Handler:    _Memezis_FindDuplicates_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadMedia",
			Handler:       _Memezis_UploadMedia_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "memezis.proto",
}

func (m *AddPostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPostRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPostRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SourceUrl) > 0 {
		i -= len(m.SourceUrl)
		copy(dAtA[i:], m.SourceUrl)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.SourceUrl)))
		i--
		dAtA[i] = 0x32
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMemezis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintMemezis(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AddedBy) > 0 {
		i -= len(m.AddedBy)
		copy(dAtA[i:], m.AddedBy)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.AddedBy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Media) > 0 {
		for iNdEx := len(m.Media) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Media[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMemezis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Media) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Media) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Media) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SourceID) > 0 {
		i -= len(m.SourceID)
		copy(dAtA[i:], m.SourceID)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.SourceID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Down != 0 {
		i = encodeVarintMemezis(dAtA, i, uint64(m.Down))
		i--
		dAtA[i] = 0x10
	}
	if m.Up != 0 {
		i = encodeVarintMemezis(dAtA, i, uint64(m.Up))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Duplicates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Duplicates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Duplicates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Likely) > 0 {
		dAtA3 := make([]byte, len(m.Likely)*10)
		var j2 int
		for _, num1 := range m.Likely {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintMemezis(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Complete) > 0 {
		dAtA5 := make([]byte, len(m.Complete)*10)
		var j4 int
		for _, num1 := range m.Complete {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintMemezis(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddPostResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPostResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPostResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Duplicates != nil {
		{
			size, err := m.Duplicates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMemezis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintMemezis(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPostByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPostByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPostByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PostID != 0 {
		i = encodeVarintMemezis(dAtA, i, uint64(m.PostID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Post) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Post) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Post) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Publish) > 0 {
		for iNdEx := len(m.Publish) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Publish[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMemezis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.SourceURL) > 0 {
		i -= len(m.SourceURL)
		copy(dAtA[i:], m.SourceURL)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.SourceURL)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintMemezis(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Votes != nil {
		{
			size, err := m.Votes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMemezis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AddedBy) > 0 {
		i -= len(m.AddedBy)
		copy(dAtA[i:], m.AddedBy)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.AddedBy)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Media) > 0 {
		for iNdEx := len(m.Media) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Media[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMemezis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ID != 0 {
		i = encodeVarintMemezis(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Publish) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Publish) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Publish) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PublishedTo) > 0 {
		i -= len(m.PublishedTo)
		copy(dAtA[i:], m.PublishedTo)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.PublishedTo)))
		i--
		dAtA[i] = 0x12
	}
	if m.PublishedAt != nil {
		{
			size, err := m.PublishedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMemezis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishPostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishPostRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishPostRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PublishedAt != nil {
		{
			size, err := m.PublishedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMemezis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublishedTo) > 0 {
		i -= len(m.PublishedTo)
		copy(dAtA[i:], m.PublishedTo)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.PublishedTo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0x12
	}
	if m.PostID != 0 {
		i = encodeVarintMemezis(dAtA, i, uint64(m.PostID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PostID != 0 {
		i = encodeVarintMemezis(dAtA, i, uint64(m.PostID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetQueueInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetQueueInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetQueueInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetQueueInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetQueueInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetQueueInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DueTime != nil {
		{
			size, err := m.DueTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMemezis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LastPostTime != nil {
		{
			size, err := m.LastPostTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMemezis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Length != 0 {
		i = encodeVarintMemezis(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MediaMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Filesize != 0 {
		i = encodeVarintMemezis(dAtA, i, uint64(m.Filesize))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintMemezis(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadMediaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadMediaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadMediaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.T != nil {
		{
			size := m.T.Size()
			i -= size
			if _, err := m.T.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *UploadMediaRequest_Image) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadMediaRequest_Image) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Image != nil {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *UploadMediaRequest_Meta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadMediaRequest_Meta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMemezis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *UploadMediaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadMediaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadMediaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintMemezis(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FindDuplicatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindDuplicatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindDuplicatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintMemezis(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FindDuplicatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindDuplicatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindDuplicatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Likely) > 0 {
		for iNdEx := len(m.Likely) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Likely[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMemezis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Complete) > 0 {
		for iNdEx := len(m.Complete) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Complete[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMemezis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMemezis(dAtA []byte, offset int, v uint64) int {
	offset -= sovMemezis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddPostRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Media) > 0 {
		for _, e := range m.Media {
			l = e.Size()
			n += 1 + l + sovMemezis(uint64(l))
		}
	}
	l = len(m.AddedBy)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovMemezis(uint64(l))
		}
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovMemezis(uint64(l))
	}
	l = len(m.SourceUrl)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Media) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	l = len(m.SourceID)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Up != 0 {
		n += 1 + sovMemezis(uint64(m.Up))
	}
	if m.Down != 0 {
		n += 1 + sovMemezis(uint64(m.Down))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Duplicates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Complete) > 0 {
		l = 0
		for _, e := range m.Complete {
			l += sovMemezis(uint64(e))
		}
		n += 1 + sovMemezis(uint64(l)) + l
	}
	if len(m.Likely) > 0 {
		l = 0
		for _, e := range m.Likely {
			l += sovMemezis(uint64(e))
		}
		n += 1 + sovMemezis(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddPostResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMemezis(uint64(m.ID))
	}
	if m.Duplicates != nil {
		l = m.Duplicates.Size()
		n += 1 + l + sovMemezis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPostByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PostID != 0 {
		n += 1 + sovMemezis(uint64(m.PostID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Post) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMemezis(uint64(m.ID))
	}
	if len(m.Media) > 0 {
		for _, e := range m.Media {
			l = e.Size()
			n += 1 + l + sovMemezis(uint64(l))
		}
	}
	l = len(m.AddedBy)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	if m.Votes != nil {
		l = m.Votes.Size()
		n += 1 + l + sovMemezis(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovMemezis(uint64(l))
		}
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	l = len(m.SourceURL)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	if len(m.Publish) > 0 {
		for _, e := range m.Publish {
			l = e.Size()
			n += 1 + l + sovMemezis(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Publish) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublishedAt != nil {
		l = m.PublishedAt.Size()
		n += 1 + l + sovMemezis(uint64(l))
	}
	l = len(m.PublishedTo)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishPostRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PostID != 0 {
		n += 1 + sovMemezis(uint64(m.PostID))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	l = len(m.PublishedTo)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	if m.PublishedAt != nil {
		l = m.PublishedAt.Size()
		n += 1 + l + sovMemezis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	if m.PostID != 0 {
		n += 1 + sovMemezis(uint64(m.PostID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetQueueInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetQueueInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovMemezis(uint64(m.Length))
	}
	if m.LastPostTime != nil {
		l = m.LastPostTime.Size()
		n += 1 + l + sovMemezis(uint64(l))
	}
	if m.DueTime != nil {
		l = m.DueTime.Size()
		n += 1 + l + sovMemezis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MediaMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovMemezis(uint64(m.Type))
	}
	if m.Filesize != 0 {
		n += 1 + sovMemezis(uint64(m.Filesize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadMediaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.T != nil {
		n += m.T.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadMediaRequest_Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Image != nil {
		l = len(m.Image)
		n += 1 + l + sovMemezis(uint64(l))
	}
	return n
}
func (m *UploadMediaRequest_Meta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovMemezis(uint64(l))
	}
	return n
}
func (m *UploadMediaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovMemezis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FindDuplicatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMemezis(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FindDuplicatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Complete) > 0 {
		for _, e := range m.Complete {
			l = e.Size()
			n += 1 + l + sovMemezis(uint64(l))
		}
	}
	if len(m.Likely) > 0 {
		for _, e := range m.Likely {
			l = e.Size()
			n += 1 + l + sovMemezis(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMemezis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMemezis(x uint64) (n int) {
	return sovMemezis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddPostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemezis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media, &Media{})
			if err := m.Media[len(m.Media)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemezis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Media) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemezis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Media: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Media: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemezis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemezis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Up", wireType)
			}
			m.Up = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Up |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Down", wireType)
			}
			m.Down = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Down |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemezis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Duplicates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemezis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Duplicates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Duplicates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMemezis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Complete = append(m.Complete, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMemezis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMemezis
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMemezis
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Complete) == 0 {
					m.Complete = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMemezis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Complete = append(m.Complete, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMemezis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Likely = append(m.Likely, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMemezis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMemezis
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMemezis
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Likely) == 0 {
					m.Likely = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMemezis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Likely = append(m.Likely, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Likely", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMemezis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPostResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemezis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPostResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPostResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duplicates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duplicates == nil {
				m.Duplicates = &Duplicates{}
			}
			if err := m.Duplicates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemezis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPostByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemezis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPostByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPostByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostID", wireType)
			}
			m.PostID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMemezis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Post) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemezis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Post: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Post: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media, &Media{})
			if err := m.Media[len(m.Media)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Votes == nil {
				m.Votes = &Vote{}
			}
			if err := m.Votes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publish", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publish = append(m.Publish, &Publish{})
			if err := m.Publish[len(m.Publish)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemezis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Publish) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemezis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Publish: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Publish: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublishedAt == nil {
				m.PublishedAt = &types.Timestamp{}
			}
			if err := m.PublishedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishedTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublishedTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemezis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishPostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemezis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishPostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishPostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostID", wireType)
			}
			m.PostID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishedTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublishedTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublishedAt == nil {
				m.PublishedAt = &types.Timestamp{}
			}
			if err := m.PublishedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemezis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemezis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostID", wireType)
			}
			m.PostID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMemezis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetQueueInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemezis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetQueueInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetQueueInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemezis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetQueueInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemezis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetQueueInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetQueueInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPostTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastPostTime == nil {
				m.LastPostTime = &types.Timestamp{}
			}
			if err := m.LastPostTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DueTime == nil {
				m.DueTime = &types.Timestamp{}
			}
			if err := m.DueTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemezis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemezis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MediaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filesize", wireType)
			}
			m.Filesize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Filesize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMemezis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadMediaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemezis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadMediaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadMediaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.T = &UploadMediaRequest_Image{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MediaMetadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.T = &UploadMediaRequest_Meta{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemezis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadMediaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemezis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadMediaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadMediaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemezis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindDuplicatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemezis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindDuplicatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindDuplicatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMemezis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindDuplicatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemezis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindDuplicatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindDuplicatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Complete = append(m.Complete, &Post{})
			if err := m.Complete[len(m.Complete)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Likely", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemezis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemezis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Likely = append(m.Likely, &Post{})
			if err := m.Likely[len(m.Likely)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemezis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemezis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMemezis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMemezis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMemezis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMemezis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMemezis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMemezis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMemezis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMemezis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMemezis = fmt.Errorf("proto: unexpected end of group")
)
