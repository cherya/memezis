// Code generated by protoc-gen-goclay, but your can (must) modify it.
// source: memezis.proto

package memezis

import (
	"bytes"
	"fmt"
	"io"

	desc "github.com/cherya/memezis/pkg/memezis"

	"github.com/pkg/errors"
)

func (i *Memezis) UploadMedia(stream desc.Memezis_UploadMediaServer) error {
	data, err := stream.Recv()
	var meta *desc.MediaMetadata
	if err != nil {
		return err
	}
	switch x := data.T.(type) {
	case *desc.UploadMediaRequest_Meta:
		meta = x.Meta
	default:
		return fmt.Errorf("UploadMediaRequest.T has unexpected type %T. First batch must contain Metadata", x)
	}

	ext := mediaTypeExtension(meta.GetType())
	if ext == "" {
		return fmt.Errorf("UploadMedia: unsupported Metadata.Type")
	}
	if meta.GetFilename() == "" {
		return fmt.Errorf("UploadMedia: Metadata.Filename can't be empty")
	}

	media := make([]byte, meta.GetFilesize())

	// read file from stream
	for {
		r, err := stream.Recv()
		if err != nil {
			if err == io.EOF {
				break
			}
			return errors.Wrap(err, "UploadMedia: failed unexpectedly while reading chunks from stream")
		}
		media = append(media, r.GetImage()...)
	}

	buf := bytes.NewBuffer(media)
	filePath, err := i.fs.UploadTemp(buf, fmt.Sprintf("%s.%s", meta.GetFilename(), ext))
	if err != nil {
		return errors.Wrap(err, "UploadMedia: error saving file")
	}

	err = stream.SendAndClose(&desc.UploadMediaResponse{
		URL: filePath,
	})
	if err != nil {
		return errors.Wrap(err, "UploadMedia: can't close stream")
	}

	//img, _, err := image.Decode(bytes.NewReader(buf.Bytes()))
	//if err != nil {
	//	return errors.Wrap(err, "UploadMedia: can't convert to image")
	//}
	//
	//hash := fmt.Sprintf("%x", phash.DTC(img))
	//
	//fmt.Println(hash)

	return nil
}

func mediaTypeExtension(mediaType desc.MediaType) string {
	switch mediaType {
	case desc.MediaType_PNG:
		return "png"
	case desc.MediaType_JPG:
		return "jpg"
	case desc.MediaType_GIF:
		return "gif"
	default:
		return ""
	}
}
