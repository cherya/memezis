// Code generated by protoc-gen-goclay, but your can (must) modify it.
// source: memezis.proto

package memezis

import (
	"bytes"
	"context"
	"time"

	"github.com/cherya/memezis/internal/app/hfind"
	"github.com/cherya/memezis/internal/app/store"
	desc "github.com/cherya/memezis/pkg/memezis"

	"github.com/gomodule/redigo/redis"
	log "github.com/sirupsen/logrus"
	"github.com/utrack/clay/v2/transport"
)

type Memezis struct {
	store  DataStorageManager
	qm     QueueManager
	fs     FileManager
	redis  *redis.Pool
	hstore *hfind.HStore
}

// NewMemezis create new Memezis
func NewMemezis(store DataStorageManager, qm QueueManager, fs FileManager, redis *redis.Pool) *Memezis {
	strHashes, err := store.GetHashes(context.Background())
	if err != nil {
		log.Fatal("NewMemezis: can't get initial hashes")
	}

	hashes := make([]hfind.Hash, len(strHashes))
	for _, h := range strHashes {
		hash, err := hfind.FromString(h)
		if err != nil {
			log.Fatalf("NewMemezis: can't convert initial hash %s", h)
		}
		hashes = append(hashes, hash)
	}
	log.Infof("Loaded %d hashes to HStore", len(hashes))
	hstore := hfind.NewHStore(hashes)
	return &Memezis{
		store:  store,
		qm:     qm,
		fs:     fs,
		redis:  redis,
		hstore: hstore,
	}
}

// GetDescription is a simple alias to the ServiceDesc constructor.
// It makes it possible to register the service implementation @ the server.
func (i *Memezis) GetDescription() transport.ServiceDesc {
	return desc.NewMemezisServiceDesc(i)
}

type DataStorageManager interface {
	AddPost(ctx context.Context, media []*store.Media, tags []string, createdAt time.Time, source, submittedBy, text, sourceURL string) (*store.Post, error)
	GetPostByID(ctx context.Context, postID int64) (*store.Post, error)
	GetRandomPost(ctx context.Context) (*store.Post, error)
	EnqueuePost(ctx context.Context, postID int64, publishedAt time.Time, to string) error
	PublishPost(ctx context.Context, postID int64, publishedAt time.Time, to, url string) error
	UpVote(ctx context.Context, postID int64, userID string) (*store.VotesCount, error)
	DownVote(ctx context.Context, postID int64, userID string) (*store.VotesCount, error)
	GetTagsByIDs(ctx context.Context, tagsIDs []int64) ([]string, error)
	GetPostsByMediaHashes(ctx context.Context, hashes []string) ([]store.Post, error)
	GetHashes(ctx context.Context) ([]string, error)
}

type FileManager interface {
	Upload(f *bytes.Buffer, filename string) (string, error)
	UploadTemp(f *bytes.Buffer, filename string) (string, error)
	IsObjExists(objKey string) bool
	IsTempObjExists(objKey string) bool
	MakeObjPermanent(objName string) error
	GetObjAbsoluteURL(objKey string) string
}

type QueueManager interface {
	Push(queue string, value string) error
	QueueLength(queue string) (int64, error)
	QueueLastPopTime(queue string) (time.Time, error)
	GetQueueTimeout(queue string) (time.Duration, error)
	Consume(ctx context.Context, queue string, pollTimeout time.Duration, handler func(value string))
}
