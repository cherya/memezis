// Code generated by protoc-gen-goclay, but your can (must) modify it.
// source: memezis.proto

package memezis

import (
	"context"
	"sort"

	"github.com/cherya/memezis/internal/app/hfind"
	"github.com/cherya/memezis/internal/app/store"
	desc "github.com/cherya/memezis/pkg/memezis"

	"github.com/pkg/errors"
	log "github.com/sirupsen/logrus"
)

type Duplicates struct {
	Complete []*desc.Post
	Likely   []*desc.Post
}

func (i *Memezis) FindDuplicatesByMediaID(ctx context.Context, req *desc.FindDuplicatesByMediaIDRequest) (*desc.FindDuplicatesByMediaIDResponse, error) {
	if req.GetId() == 0 {
		return nil, errors.New("FindDuplicates: id must be greater than 0")
	}

	media, err := i.store.GetMediaByIDs(ctx, []int64{req.GetId()})
	if err != nil {
		return nil, errors.Wrap(err, "can't get media by ids")
	}

	duplicates, err := i.findDuplicates(ctx, media[0], req.GetLimit())
	if err != nil {
		return nil, errors.Wrap(err, "error finding media duplicates")
	}

	return &desc.FindDuplicatesByMediaIDResponse{
		Duplicate: duplicates,
	}, nil
}

func (i *Memezis) findDuplicates(ctx context.Context, media store.Media, n int32) ([]*desc.PostDuplicate, error) {
	hash, err := hfind.FromString(media.Phash)
	if err != nil {
		return nil, errors.Wrapf(err, "can't get convert hash from string %s", media.Phash)
	}
	matches := i.hstore.FindKNN(hash, int(n))
	sort.Sort(matches)
	hashes := []string{}
	hashToScore := make(map[string]int, 0)

	for _, m := range matches {
		if m.Score < 7 {
			hashes = append(hashes, m.Hash.String())
			hashToScore[m.Hash.String()] = m.Score
		}
	}

	//TODO: must be one query
	posts, err := i.store.GetPostsByMediaHashes(ctx, hashes)
	if err != nil {
		posts = make([]store.Post, 0)
		log.Error(errors.Wrap(err, "findDuplicates: can't get posts by hashes (complete)"))
	}

	duplicates := make([]*desc.PostDuplicate, 0, len(posts))
	for _, p := range posts {
		// exclude post which media belongs
		if media.PostID == p.ID {
			continue
		}
		score := -1
		for _, m := range p.Media {
			if s, ok := hashToScore[m.Phash]; ok {
				score = s
			}
		}
		if score == -1 {
			continue
		}
		duplicates = append(duplicates, &desc.PostDuplicate{
			Post:  toProtoPost(&p, nil, i.fs.GetObjAbsoluteURL),
			Score: int32(score),
		})
	}

	return duplicates, nil
}
