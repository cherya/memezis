// Code generated by protoc-gen-goclay, but your can (must) modify it.
// source: memezis.proto

package memezis

import (
	"context"
	"log"
	"net/http"

	"github.com/cherya/memezis/internal/app/store"
	e "github.com/cherya/memezis/pkg/errors"
	desc "github.com/cherya/memezis/pkg/memezis"

	"github.com/pkg/errors"
)

func (i *Memezis) GetPostByID(ctx context.Context, req *desc.GetPostByIDRequest) (*desc.Post, error) {
	postID := req.GetPostID()

	post, err := i.store.GetPostByID(ctx, postID)
	if err != nil {
		if errors.Cause(err) == store.ErrNotFound {
			return nil, e.WrapC(err, http.StatusNotFound)
		}
		log.Println("GetPostByID: can't get post from store", err)
		return nil, errors.Wrap(err, "GetPostByID: can't get post from store")
	}

	tags, err := i.store.GetTagsByIDs(ctx, post.Tags)
	if err != nil {
		if errors.Cause(err) == store.ErrNotFound {
			tags = []string{}
		}
		log.Println("GetPostByID: can't get tags from store", err)
		return nil, errors.Wrap(err, "GetPostByID: can't get tags from store")
	}

	return toProtoPost(post, tags, i.fs.GetObjAbsoluteURL), nil
}

func toProtoPost(post *store.Post, tags []string, getURL func(string) string) *desc.Post {
	votes := &desc.Vote{
		Up:   int64(post.Votes.Up),
		Down: int64(post.Votes.Down),
	}

	media := make([]*desc.Media, 0, len(post.Media))
	for _, mm := range post.Media {
		media = append(media, &desc.Media{
			URL:      getURL(mm.Key),
			Type:     mm.Type,
			SourceID: mm.SourceID,
		})
	}

	return &desc.Post{
		ID:      post.ID,
		Media:   media,
		Votes:   votes,
		AddedBy: post.SubmittedBy,
		Source:  post.Source,
		Text:    post.Text,
		Tags:    tags,
	}
}
